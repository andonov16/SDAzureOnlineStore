@page "/customer-form"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json;
@using OnlineStore.Server.Data.Repositories
@using OnlineStore.Server.Model;
@inject CustomersRepository customersRepo;
@inject CartsRepository cartRepo;
@inject NavigationManager Navigation;

<h3>Customer Form</h3>


<EditForm Model="customer" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="FullName">Full Name:</label>
        <InputText id="FullName" class="form-control" @bind-Value="customer.FullName" />
        <ValidationMessage For="@(() => customer.FullName)" />
    </div>

    <div class="form-group">
        <label for="Email">Email:</label>
        <InputText id="Email" class="form-control" @bind-Value="customer.Email" />
        <ValidationMessage For="@(() => customer.Email)" />
    </div>

    <div class="form-group">
        <label for="Address">Address:</label>
        <InputText id="Address" class="form-control" @bind-Value="customer.Address" />
        <ValidationMessage For="@(() => customer.Address)" />
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    private Customer customer = new Customer();
    private Customer? customerToLog = null;

    private async void HandleValidSubmit()
    {
        // Try to find the customer by Email (and optionally FullName)
        Customer? customerToLog = await customersRepo.FindAsync(c => c.Email == customer.Email);

        if (customerToLog == null)
        {
            // If no existing customer found, create a new one
            customerToLog = customer;
            await customersRepo.CreateAsync(customer);
            customerToLog = await customersRepo.FindAsync(c => c.Email == customer.Email);
        }

        if(customerToLog.Cart == null)
        {
            Cart newCart = new Cart()
            {
                Customer = customerToLog,
                CustomerId = customerToLog.Id,
            };
            await cartRepo.CreateAsync(newCart);
            newCart = await cartRepo.FindAsync(c => c.CustomerId == customerToLog.Id);

            customerToLog.Cart = newCart;
            await customersRepo.UpdateAsync(customerToLog);
        }

        Navigation.NavigateTo($"/store/{customerToLog.Id}");
    }

}
